diff --git a/main.py b/main.py
index 567b3a8..ccd43a0 100644
--- a/main.py
+++ b/main.py
@@ -1,56 +1,63 @@
+import argparse
 import json
-from pptx import Presentation
 import os
+from pptx import Presentation
 
 from tools.slide_types import (
     add_title_slide,
     add_section_slide,
     add_content_slide,
-    add_closing_slide
+    add_closing_slide,
 )
 from tools.background_utils import set_background
 
 
 # ---------- 载入模板文件 ----------
 def load_json(path):
     with open(path, "r", encoding="utf-8") as f:
         return json.load(f)
 
 
-template_file = "slides/夜游宫.json"
-style_file = "styles/style1.json"
+def main():
+    parser = argparse.ArgumentParser(description="Generate PPT from templates")
+    parser.add_argument("--template", default="slides/夜游宫.json", help="slide template JSON")
+    parser.add_argument("--style", default="styles/style1.json", help="style JSON")
+    parser.add_argument("--output_dir", default="output", help="directory for generated ppt")
+    parser.add_argument("--image_dir", default="images", help="directory for slide images")
+    args = parser.parse_args()
+
+    template = load_json(args.template)
+    style_data = load_json(args.style)
+    style = style_data["style"]
 
-template_name = os.path.splitext(os.path.basename(template_file))[0]
-style_name = os.path.splitext(os.path.basename(style_file))[0]
+    template_name = os.path.splitext(os.path.basename(args.template))[0]
+    style_name = os.path.splitext(os.path.basename(args.style))[0]
+    output_file = f"{template_name}_{style_name}.pptx"
+    output_path = os.path.join(args.output_dir, output_file)
 
-output_file = f"{template_name}_{style_name}.pptx"
-output_path = os.path.join("output", output_file)
+    prs = Presentation()
 
-template = load_json(template_file)
-style_data = load_json(style_file)
-style = style_data["style"]
+    for slide_data in template["slides"]:
+        s_type = slide_data["type"]
 
-# ---------- 生成幻灯片 ----------
-prs = Presentation()
+        if s_type == "title":
+            slide = add_title_slide(prs, slide_data, style)
+        elif s_type == "section":
+            slide = add_section_slide(prs, slide_data, style)
+        elif s_type == "content":
+            slide = add_content_slide(prs, slide_data, style, image_dir=args.image_dir)
+        elif s_type == "closing":
+            slide = add_closing_slide(prs, slide_data, style)
+        else:
+            continue
 
-for slide_data in template["slides"]:
-    s_type = slide_data["type"]
+        bg_config = style["background"].get(s_type, {"type": "solid", "color": "#FFFFFF"})
+        set_background(slide, bg_config, prs)
 
-    if s_type == "title":
-        slide = add_title_slide(prs, slide_data, style)
-    elif s_type == "section":
-        slide = add_section_slide(prs, slide_data, style)
-    elif s_type == "content":
-        slide = add_content_slide(prs, slide_data, style)
-    elif s_type == "closing":
-        slide = add_closing_slide(prs, slide_data, style)
-    else:
-        continue
+    os.makedirs(os.path.dirname(output_path), exist_ok=True)
+    prs.save(output_path)
+    print(f"PPT 生成成功: {output_path}")
 
-    bg_config = style["background"].get(s_type, {"type": "solid", "color": "#FFFFFF"})
-    set_background(slide, bg_config, prs)
 
-# ---------- 保存文件 ----------
-os.makedirs(os.path.dirname(output_path), exist_ok=True)
-prs.save(output_path)
-print(f"PPT 生成成功: {output_path}")
+if __name__ == "__main__":
+    main()
diff --git a/readme.md b/readme.md
index f16c610..6e0276a 100644
--- a/readme.md
+++ b/readme.md
@@ -8,107 +8,113 @@
 
 ```
 auto-ppt/
 ├── main.py                        # 主程序入口
 ├── output/                        # 输出生成的 PPT 文件   
 ├── slides/                        # 内容结构 JSON 文件
 │   └── 示例：项目介绍.json
 ├── styles/                        # 样式模板 JSON 文件
 │   └── 示例：tech_dark.json
 ├── assets/
 │   └── backgrounds/               # 背景图像文件（用于 image/mixed 背景）
 ├── tools/                         # 工具模块
 │   ├── font_utils.py             # 字体与动态字号设置
 │   ├── slide_types.py            # 各种幻灯片类型的生成函数
 │   ├── insert_placeholder.py     # 插图留白处理
 │   ├── background_utils.py       # 背景设置工具（支持图层置底）
 ```
 
 ---
 
 ## 使用说明
 
 ### 1. 安装依赖
 
 ```
-pip install python-pptx
+pip install -r requirements.txt
 ```
 
 ### 2. 准备内容文件和样式模板
 
 #### 内容结构（`slides/*.json`）
 
 ```json
 {
   "slides": [
     {
       "type": "title",
       "title": "我的PPT标题",
       "subtitle": "副标题"
     },
     {
       "type": "section",
       "title": "第一部分"
     },
     {
       "type": "content",
       "title": "技术原理",
       "bullets": [
         "系统设计思路",
-        "【插图】整体架构图"
+        "【插图】整体架构图"  
+        // 以【插图】开头的内容会在图片目录中匹配并插入对应图片
       ]
     },
     {
       "type": "closing",
       "title": "感谢聆听",
       "subtitle": "欢迎提问"
     }
   ]
 }
 ```
 
 #### 样式模板（`styles/*.json`）
 
 支持如下结构（每类页面的标题/副标题/bullet 分别定义）：
 
 ```json
 {
   "style": {
     "title": {
       "title_text": {...},
       "subtitle_text": {...}
     },
     "content": {
       "title_text": {...},
       "bullet_text": {...}
     },
     "closing": {
       "title_text": {...},
       "subtitle_text": {...}
     },
     "background": {
       "title": {
         "type": "image",
         "image": "assets/backgrounds/tech_dark.png"
       }
     }
   }
 }
 ```
 
 ### 3. 运行程序
 
-程序将自动生成如下输出路径：
+使用命令行参数指定模板、样式、输出目录以及图片目录，例如：
 
+```bash
+python main.py --template slides/example.json \
+               --style styles/style1.json \
+               --output_dir output \
+               --image_dir images
 ```
-output/项目介绍_tech_dark.pptx
-```
+
+生成的文件将保存在 `output` 目录下，文件名由模板和样式名称组合而成。
 
 ---
 
 
 ## 🎨 提示词模板
 ```
 /prompt_template/ 内容可以使用
 ```
 
 
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..38b29a6
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,2 @@
+python-pptx
+Pillow
diff --git a/tools/background_utils.py b/tools/background_utils.py
index 7154e5f..812616a 100644
--- a/tools/background_utils.py
+++ b/tools/background_utils.py
@@ -13,26 +13,26 @@ def set_background(slide, background_config, prs):
         fill.fore_color.rgb = RGBColor(int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16))
 
     elif bg_type == "image":
         image_path = background_config.get("image")
         if image_path and os.path.exists(image_path):
             width = prs.slide_width
             height = prs.slide_height
             pic = slide.shapes.add_picture(image_path, Inches(0), Inches(0), width=width, height=height)
             # 将背景图元素移到最底层
             sp_tree = slide.shapes._spTree
             sp_tree.remove(pic._element)
             sp_tree.insert(2, pic._element)  # 通常索引 0 是 placeholder，1 是背景，应插入靠前但不覆盖内容
     elif bg_type == "mixed":
         # 先设置底色再添加图像覆盖（如渐变图）
         color = background_config.get("color", "#FFFFFF")
         image_path = background_config.get("image")
         fill.solid()
         fill.fore_color.rgb = RGBColor(int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16))
         if image_path and os.path.exists(image_path):
             width = prs.slide_width
             height = prs.slide_height
             pic = slide.shapes.add_picture(image_path, Inches(0), Inches(0), width=width, height=height)
             # 将背景图元素移到最底层
             sp_tree = slide.shapes._spTree
             sp_tree.remove(pic._element)
-            sp_tree.insert(2, pic._element)  # 通常索引 0 是 placeholder，1 是背景，应插入靠前但不覆盖内容
\ No newline at end of file
+            sp_tree.insert(2, pic._element)  # 通常索引 0 是 placeholder，1 是背景，应插入靠前但不覆盖内容
diff --git a/tools/insert_image_file.py b/tools/insert_image_file.py
index 2cba8cb..29e1d84 100644
--- a/tools/insert_image_file.py
+++ b/tools/insert_image_file.py
@@ -1,33 +1,28 @@
 import os
-import re
 from difflib import get_close_matches
 from pptx.util import Inches
-
-
-def extract_illustration_keyword(text):
-    match = re.search(r"【插图】(.*)", text)
-    return match.group(1).strip() if match else None
+from tools.tag_utils import extract_illustration_keyword
 
 
 def find_matching_image(keyword, folder="images"):
     if not keyword or not os.path.exists(folder):
         return None
     candidates = os.listdir(folder)
     matches = get_close_matches(keyword.replace(" ", "").lower(), [f.lower() for f in candidates], n=1, cutoff=0.4)
     if matches:
         for candidate in candidates:
             if candidate.lower() == matches[0]:
                 return os.path.join(folder, candidate)
     return None
 
 
 def insert_image(slide, image_path):
     if not image_path:
         return
     left = Inches(5.5)
     top = Inches(2)
     width = Inches(3.5)
     try:
         slide.shapes.add_picture(image_path, left, top, width=width)
     except Exception as e:
         print(f"插图失败：{image_path}", e)
diff --git a/tools/insert_placeholder.py b/tools/insert_placeholder.py
index dc81703..535150e 100644
--- a/tools/insert_placeholder.py
+++ b/tools/insert_placeholder.py
@@ -1,30 +1,25 @@
 from pptx.util import Inches, Pt
 from pptx.dml.color import RGBColor
-import re
-
-
-def extract_illustration_keyword(text):
-    match = re.search(r"【插图】(.*)", text)
-    return match.group(1).strip() if match else None
+from tools.tag_utils import extract_illustration_keyword
 
 
 def insert_placeholder_box(slide, keyword):
     if not keyword:
         return
     left = Inches(5.5)
     top = Inches(2)
     width = Inches(3.5)
     height = Inches(2.5)
     shape = slide.shapes.add_shape(
         autoshape_type_id=1,  # Rectangle
         left=left,
         top=top,
         width=width,
         height=height
     )
     shape.text = f"[待添加插图：{keyword}]"
     text_frame = shape.text_frame
     p = text_frame.paragraphs[0]
     p.font.size = Pt(12)
     p.font.bold = True
     p.font.color.rgb = RGBColor(200, 200, 200)
diff --git a/tools/slide_types.py b/tools/slide_types.py
index 6436e46..d4886af 100644
--- a/tools/slide_types.py
+++ b/tools/slide_types.py
@@ -1,65 +1,71 @@
 from pptx.enum.text import PP_ALIGN
 from pptx.util import Inches
 from tools.font_utils import set_font
-from tools.insert_placeholder import extract_illustration_keyword, insert_placeholder_box
+from tools.insert_placeholder import insert_placeholder_box
+from tools.insert_image_file import find_matching_image, insert_image
+from tools.tag_utils import extract_illustration_keyword
 
 
 def add_title_slide(prs, slide_data, style):
     slide = prs.slides.add_slide(prs.slide_layouts[0])
     slide.shapes.title.text = slide_data["title"]
     subtitle = slide.placeholders[1]
     subtitle.text = slide_data.get("subtitle", "")
     set_font(slide.shapes.title.text_frame.paragraphs[0], style, path="title.title_text")
     set_font(subtitle.text_frame.paragraphs[0], style, path="title.subtitle_text")
     return slide
 
 
 def add_section_slide(prs, slide_data, style):
     slide = prs.slides.add_slide(prs.slide_layouts[6])
     slide_width = prs.slide_width
     slide_height = prs.slide_height
     box_width = Inches(10)
     box_height = Inches(1.5)
     left = int((slide_width - box_width) / 2)
     top = int((slide_height - box_height) / 2)
 
     textbox = slide.shapes.add_textbox(left, top, box_width, box_height)
     tf = textbox.text_frame
     tf.clear()
     p = tf.paragraphs[0]
     p.text = slide_data["title"]
     set_font(p, style, path="section.title_text")
     p.alignment = PP_ALIGN.CENTER
     return slide
 
 
-def add_content_slide(prs, slide_data, style):
+def add_content_slide(prs, slide_data, style, image_dir="images"):
     slide = prs.slides.add_slide(prs.slide_layouts[1])
     slide.shapes.title.text = slide_data["title"]
     set_font(slide.shapes.title.text_frame.paragraphs[0], style, path="content.title_text")
 
     tf = slide.placeholders[1].text_frame
     tf.clear()
 
     for bullet in slide_data["bullets"]:
         p = tf.add_paragraph()
         p.text = bullet
         set_font(p, style, path="content.bullet_text")
 
         keyword = extract_illustration_keyword(bullet)
         if keyword:
-            insert_placeholder_box(slide, keyword)
+            image_path = find_matching_image(keyword, image_dir)
+            if image_path:
+                insert_image(slide, image_path)
+            else:
+                insert_placeholder_box(slide, keyword)
 
     return slide
 
 
 def add_closing_slide(prs, slide_data, style):
     slide = prs.slides.add_slide(prs.slide_layouts[1])
     slide.shapes.title.text = slide_data["title"]
     tf = slide.placeholders[1].text_frame
     tf.clear()
     p = tf.paragraphs[0]
     p.text = slide_data.get("subtitle", "")
     set_font(slide.shapes.title.text_frame.paragraphs[0], style, path="closing.title_text", alignment="center")
     set_font(p, style, path="closing.subtitle_text")
     return slide
diff --git a/tools/tag_utils.py b/tools/tag_utils.py
new file mode 100644
index 0000000..b1889a4
--- /dev/null
+++ b/tools/tag_utils.py
@@ -0,0 +1,7 @@
+import re
+
+
+def extract_illustration_keyword(text: str) -> str | None:
+    """Extract the keyword after the illustration tag."""
+    match = re.search(r"【插图】(.*)", text)
+    return match.group(1).strip() if match else None
